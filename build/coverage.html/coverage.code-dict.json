{"/home/travis/build/npmtest/node-npmtest-grunt-spritesmith/test.js":"/* istanbul instrument in package npmtest_grunt_spritesmith */\n/*jslint\n    bitwise: true,\n    browser: true,\n    maxerr: 8,\n    maxlen: 96,\n    node: true,\n    nomen: true,\n    regexp: true,\n    stupid: true\n*/\n(function () {\n    'use strict';\n    var local;\n\n\n\n    // run shared js-env code - pre-init\n    (function () {\n        // init local\n        local = {};\n        // init modeJs\n        local.modeJs = (function () {\n            try {\n                return typeof navigator.userAgent === 'string' &&\n                    typeof document.querySelector('body') === 'object' &&\n                    typeof XMLHttpRequest.prototype.open === 'function' &&\n                    'browser';\n            } catch (errorCaughtBrowser) {\n                return module.exports &&\n                    typeof process.versions.node === 'string' &&\n                    typeof require('http').createServer === 'function' &&\n                    'node';\n            }\n        }());\n        // init global\n        local.global = local.modeJs === 'browser'\n            ? window\n            : global;\n        switch (local.modeJs) {\n        // re-init local from window.local\n        case 'browser':\n            local = local.global.utility2.objectSetDefault(\n                local.global.utility2_rollup || local.global.local,\n                local.global.utility2\n            );\n            break;\n        // re-init local from example.js\n        case 'node':\n            local = (local.global.utility2_rollup || require('utility2'))\n                .requireExampleJsFromReadme();\n            break;\n        }\n        // export local\n        local.global.local = local;\n    }());\n\n\n\n    // run shared js-env code - function\n    (function () {\n        return;\n    }());\n    switch (local.modeJs) {\n\n\n\n    // run browser js-env code - function\n    case 'browser':\n        break;\n\n\n\n    // run node js-env code - function\n    case 'node':\n        break;\n    }\n\n\n\n    // run shared js-env code - post-init\n    (function () {\n        return;\n    }());\n    switch (local.modeJs) {\n\n\n\n    // run browser js-env code - post-init\n    case 'browser':\n        local.testCase_browser_nullCase = local.testCase_browser_nullCase || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test browsers's null-case handling-behavior-behavior\n         */\n            onError(null, options);\n        };\n\n        // run tests\n        local.nop(local.modeTest &&\n            document.querySelector('#testRunButton1') &&\n            document.querySelector('#testRunButton1').click());\n        break;\n\n\n\n    // run node js-env code - post-init\n    /* istanbul ignore next */\n    case 'node':\n        local.testCase_buildApidoc_default = local.testCase_buildApidoc_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildApidoc's default handling-behavior-behavior\n         */\n            options = { modulePathList: module.paths };\n            local.buildApidoc(options, onError);\n        };\n\n        local.testCase_buildApp_default = local.testCase_buildApp_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildApp's default handling-behavior-behavior\n         */\n            local.testCase_buildReadme_default(options, local.onErrorThrow);\n            local.testCase_buildLib_default(options, local.onErrorThrow);\n            local.testCase_buildTest_default(options, local.onErrorThrow);\n            local.testCase_buildCustomOrg_default(options, local.onErrorThrow);\n            options = [];\n            local.buildApp(options, onError);\n        };\n\n        local.testCase_buildCustomOrg_default = local.testCase_buildCustomOrg_default ||\n            function (options, onError) {\n            /*\n             * this function will test buildCustomOrg's default handling-behavior\n             */\n                options = {};\n                local.buildCustomOrg(options, onError);\n            };\n\n        local.testCase_buildLib_default = local.testCase_buildLib_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildLib's default handling-behavior\n         */\n            options = {};\n            local.buildLib(options, onError);\n        };\n\n        local.testCase_buildReadme_default = local.testCase_buildReadme_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildReadme's default handling-behavior-behavior\n         */\n            options = {};\n            local.buildReadme(options, onError);\n        };\n\n        local.testCase_buildTest_default = local.testCase_buildTest_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildTest's default handling-behavior\n         */\n            options = {};\n            local.buildTest(options, onError);\n        };\n\n        local.testCase_webpage_default = local.testCase_webpage_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test webpage's default handling-behavior\n         */\n            options = { modeCoverageMerge: true, url: local.serverLocalHost + '?modeTest=1' };\n            local.browserTest(options, onError);\n        };\n\n        // run test-server\n        local.testRunServer(local);\n        break;\n    }\n}());\n","/home/travis/build/npmtest/node-npmtest-grunt-spritesmith/lib.npmtest_grunt_spritesmith.js":"/* istanbul instrument in package npmtest_grunt_spritesmith */\n/*jslint\n    bitwise: true,\n    browser: true,\n    maxerr: 8,\n    maxlen: 96,\n    node: true,\n    nomen: true,\n    regexp: true,\n    stupid: true\n*/\n(function () {\n    'use strict';\n    var local;\n\n\n\n    // run shared js-env code - pre-init\n    (function () {\n        // init local\n        local = {};\n        // init modeJs\n        local.modeJs = (function () {\n            try {\n                return typeof navigator.userAgent === 'string' &&\n                    typeof document.querySelector('body') === 'object' &&\n                    typeof XMLHttpRequest.prototype.open === 'function' &&\n                    'browser';\n            } catch (errorCaughtBrowser) {\n                return module.exports &&\n                    typeof process.versions.node === 'string' &&\n                    typeof require('http').createServer === 'function' &&\n                    'node';\n            }\n        }());\n        // init global\n        local.global = local.modeJs === 'browser'\n            ? window\n            : global;\n        // init utility2_rollup\n        local = local.global.utility2_rollup || local;\n        // init lib\n        local.local = local.npmtest_grunt_spritesmith = local;\n        // init exports\n        if (local.modeJs === 'browser') {\n            local.global.utility2_npmtest_grunt_spritesmith = local;\n        } else {\n            module.exports = local;\n            module.exports.__dirname = __dirname;\n            module.exports.module = module;\n        }\n    }());\n}());\n","/home/travis/build/npmtest/node-npmtest-grunt-spritesmith/example.js":"/*\nexample.js\n\nquickstart example\n\ninstruction\n    1. save this script as example.js\n    2. run the shell command:\n        $ npm install npmtest-grunt-spritesmith && PORT=8081 node example.js\n    3. play with the browser-demo on http://127.0.0.1:8081\n*/\n\n\n\n/* istanbul instrument in package npmtest_grunt_spritesmith */\n/*jslint\n    bitwise: true,\n    browser: true,\n    maxerr: 8,\n    maxlen: 96,\n    node: true,\n    nomen: true,\n    regexp: true,\n    stupid: true\n*/\n(function () {\n    'use strict';\n    var local;\n\n\n\n    // run shared js-env code - pre-init\n    (function () {\n        // init local\n        local = {};\n        // init modeJs\n        local.modeJs = (function () {\n            try {\n                return typeof navigator.userAgent === 'string' &&\n                    typeof document.querySelector('body') === 'object' &&\n                    typeof XMLHttpRequest.prototype.open === 'function' &&\n                    'browser';\n            } catch (errorCaughtBrowser) {\n                return module.exports &&\n                    typeof process.versions.node === 'string' &&\n                    typeof require('http').createServer === 'function' &&\n                    'node';\n            }\n        }());\n        // init global\n        local.global = local.modeJs === 'browser'\n            ? window\n            : global;\n        // init utility2_rollup\n        local = local.global.utility2_rollup || (local.modeJs === 'browser'\n            ? local.global.utility2_npmtest_grunt_spritesmith\n            : global.utility2_moduleExports);\n        // export local\n        local.global.local = local;\n    }());\n    switch (local.modeJs) {\n\n\n\n    // post-init\n    // run browser js-env code - post-init\n    /* istanbul ignore next */\n    case 'browser':\n        local.testRunBrowser = function (event) {\n            if (!event || (event &&\n                    event.currentTarget &&\n                    event.currentTarget.className &&\n                    event.currentTarget.className.includes &&\n                    event.currentTarget.className.includes('onreset'))) {\n                // reset output\n                Array.from(\n                    document.querySelectorAll('body > .resettable')\n                ).forEach(function (element) {\n                    switch (element.tagName) {\n                    case 'INPUT':\n                    case 'TEXTAREA':\n                        element.value = '';\n                        break;\n                    default:\n                        element.textContent = '';\n                    }\n                });\n            }\n            switch (event && event.currentTarget && event.currentTarget.id) {\n            case 'testRunButton1':\n                // show tests\n                if (document.querySelector('#testReportDiv1').style.display === 'none') {\n                    document.querySelector('#testReportDiv1').style.display = 'block';\n                    document.querySelector('#testRunButton1').textContent =\n                        'hide internal test';\n                    local.modeTest = true;\n                    local.testRunDefault(local);\n                // hide tests\n                } else {\n                    document.querySelector('#testReportDiv1').style.display = 'none';\n                    document.querySelector('#testRunButton1').textContent = 'run internal test';\n                }\n                break;\n            // custom-case\n            default:\n                break;\n            }\n            if (document.querySelector('#inputTextareaEval1') && (!event || (event &&\n                    event.currentTarget &&\n                    event.currentTarget.className &&\n                    event.currentTarget.className.includes &&\n                    event.currentTarget.className.includes('oneval')))) {\n                // try to eval input-code\n                try {\n                    /*jslint evil: true*/\n                    eval(document.querySelector('#inputTextareaEval1').value);\n                } catch (errorCaught) {\n                    console.error(errorCaught);\n                }\n            }\n        };\n        // log stderr and stdout to #outputTextareaStdout1\n        ['error', 'log'].forEach(function (key) {\n            console[key + '_original'] = console[key];\n            console[key] = function () {\n                var element;\n                console[key + '_original'].apply(console, arguments);\n                element = document.querySelector('#outputTextareaStdout1');\n                if (!element) {\n                    return;\n                }\n                // append text to #outputTextareaStdout1\n                element.value += Array.from(arguments).map(function (arg) {\n                    return typeof arg === 'string'\n                        ? arg\n                        : JSON.stringify(arg, null, 4);\n                }).join(' ') + '\\n';\n                // scroll textarea to bottom\n                element.scrollTop = element.scrollHeight;\n            };\n        });\n        // init event-handling\n        ['change', 'click', 'keyup'].forEach(function (event) {\n            Array.from(document.querySelectorAll('.on' + event)).forEach(function (element) {\n                element.addEventListener(event, local.testRunBrowser);\n            });\n        });\n        // run tests\n        local.testRunBrowser();\n        break;\n\n\n\n    // run node js-env code - post-init\n    /* istanbul ignore next */\n    case 'node':\n        // export local\n        module.exports = local;\n        // require modules\n        local.fs = require('fs');\n        local.http = require('http');\n        local.url = require('url');\n        // init assets\n        local.assetsDict = local.assetsDict || {};\n        /* jslint-ignore-begin */\n        local.assetsDict['/assets.index.template.html'] = '\\\n<!doctype html>\\n\\\n<html lang=\"en\">\\n\\\n<head>\\n\\\n<meta charset=\"UTF-8\">\\n\\\n<meta name=\"viewport\" content=\"width=device-width, initial-scale=1\">\\n\\\n<title>{{env.npm_package_name}} (v{{env.npm_package_version}})</title>\\n\\\n<style>\\n\\\n/*csslint\\n\\\n    box-sizing: false,\\n\\\n    universal-selector: false\\n\\\n*/\\n\\\n* {\\n\\\n    box-sizing: border-box;\\n\\\n}\\n\\\nbody {\\n\\\n    background: #dde;\\n\\\n    font-family: Arial, Helvetica, sans-serif;\\n\\\n    margin: 2rem;\\n\\\n}\\n\\\nbody > * {\\n\\\n    margin-bottom: 1rem;\\n\\\n}\\n\\\n.utility2FooterDiv {\\n\\\n    margin-top: 20px;\\n\\\n    text-align: center;\\n\\\n}\\n\\\n</style>\\n\\\n<style>\\n\\\n/*csslint\\n\\\n*/\\n\\\ntextarea {\\n\\\n    font-family: monospace;\\n\\\n    height: 10rem;\\n\\\n    width: 100%;\\n\\\n}\\n\\\ntextarea[readonly] {\\n\\\n    background: #ddd;\\n\\\n}\\n\\\n</style>\\n\\\n</head>\\n\\\n<body>\\n\\\n<!-- utility2-comment\\n\\\n<div id=\"ajaxProgressDiv1\" style=\"background: #d00; height: 2px; left: 0; margin: 0; padding: 0; position: fixed; top: 0; transition: background 0.5s, width 1.5s; width: 25%;\"></div>\\n\\\nutility2-comment -->\\n\\\n<h1>\\n\\\n<!-- utility2-comment\\n\\\n    <a\\n\\\n        {{#if env.npm_package_homepage}}\\n\\\n        href=\"{{env.npm_package_homepage}}\"\\n\\\n        {{/if env.npm_package_homepage}}\\n\\\n        target=\"_blank\"\\n\\\n    >\\n\\\nutility2-comment -->\\n\\\n        {{env.npm_package_name}} (v{{env.npm_package_version}})\\n\\\n<!-- utility2-comment\\n\\\n    </a>\\n\\\nutility2-comment -->\\n\\\n</h1>\\n\\\n<h3>{{env.npm_package_description}}</h3>\\n\\\n<!-- utility2-comment\\n\\\n<h4><a download href=\"assets.app.js\">download standalone app</a></h4>\\n\\\n<button class=\"onclick onreset\" id=\"testRunButton1\">run internal test</button><br>\\n\\\n<div id=\"testReportDiv1\" style=\"display: none;\"></div>\\n\\\nutility2-comment -->\\n\\\n\\n\\\n\\n\\\n\\n\\\n<label>stderr and stdout</label>\\n\\\n<textarea class=\"resettable\" id=\"outputTextareaStdout1\" readonly></textarea>\\n\\\n<!-- utility2-comment\\n\\\n{{#if isRollup}}\\n\\\n<script src=\"assets.app.js\"></script>\\n\\\n{{#unless isRollup}}\\n\\\nutility2-comment -->\\n\\\n<script src=\"assets.utility2.rollup.js\"></script>\\n\\\n<script src=\"jsonp.utility2._stateInit?callback=window.utility2._stateInit\"></script>\\n\\\n<script src=\"assets.npmtest_grunt_spritesmith.rollup.js\"></script>\\n\\\n<script src=\"assets.example.js\"></script>\\n\\\n<script src=\"assets.test.js\"></script>\\n\\\n<!-- utility2-comment\\n\\\n{{/if isRollup}}\\n\\\nutility2-comment -->\\n\\\n<div class=\"utility2FooterDiv\">\\n\\\n    [ this app was created with\\n\\\n    <a href=\"https://github.com/kaizhu256/node-utility2\" target=\"_blank\">utility2</a>\\n\\\n    ]\\n\\\n</div>\\n\\\n</body>\\n\\\n</html>\\n\\\n';\n        /* jslint-ignore-end */\n        if (local.templateRender) {\n            local.assetsDict['/'] = local.templateRender(\n                local.assetsDict['/assets.index.template.html'],\n                {\n                    env: local.objectSetDefault(local.env, {\n                        npm_package_description: 'the greatest app in the world!',\n                        npm_package_name: 'my-app',\n                        npm_package_nameAlias: 'my_app',\n                        npm_package_version: '0.0.1'\n                    })\n                }\n            );\n        } else {\n            local.assetsDict['/'] = local.assetsDict['/assets.index.template.html']\n                .replace((/\\{\\{env\\.(\\w+?)\\}\\}/g), function (match0, match1) {\n                    // jslint-hack\n                    String(match0);\n                    switch (match1) {\n                    case 'npm_package_description':\n                        return 'the greatest app in the world!';\n                    case 'npm_package_name':\n                        return 'my-app';\n                    case 'npm_package_nameAlias':\n                        return 'my_app';\n                    case 'npm_package_version':\n                        return '0.0.1';\n                    }\n                });\n        }\n        // run the cli\n        if (local.global.utility2_rollup || module !== require.main) {\n            break;\n        }\n        local.assetsDict['/assets.example.js'] =\n            local.assetsDict['/assets.example.js'] ||\n            local.fs.readFileSync(__filename, 'utf8');\n        // bug-workaround - long $npm_package_buildCustomOrg\n        /* jslint-ignore-begin */\n        local.assetsDict['/assets.npmtest_grunt_spritesmith.rollup.js'] =\n            local.assetsDict['/assets.npmtest_grunt_spritesmith.rollup.js'] ||\n            local.fs.readFileSync(\n                local.npmtest_grunt_spritesmith.__dirname + '/lib.npmtest_grunt_spritesmith.js',\n                'utf8'\n            ).replace((/^#!/), '//');\n        /* jslint-ignore-end */\n        local.assetsDict['/favicon.ico'] = local.assetsDict['/favicon.ico'] || '';\n        // if $npm_config_timeout_exit exists,\n        // then exit this process after $npm_config_timeout_exit ms\n        if (Number(process.env.npm_config_timeout_exit)) {\n            setTimeout(process.exit, Number(process.env.npm_config_timeout_exit));\n        }\n        // start server\n        if (local.global.utility2_serverHttp1) {\n            break;\n        }\n        process.env.PORT = process.env.PORT || '8081';\n        console.error('server starting on port ' + process.env.PORT);\n        local.http.createServer(function (request, response) {\n            request.urlParsed = local.url.parse(request.url);\n            if (local.assetsDict[request.urlParsed.pathname] !== undefined) {\n                response.end(local.assetsDict[request.urlParsed.pathname]);\n                return;\n            }\n            response.statusCode = 404;\n            response.end();\n        }).listen(process.env.PORT);\n        break;\n    }\n}());\n","/home/travis/build/npmtest/node-npmtest-grunt-spritesmith/node_modules/grunt-spritesmith/tasks/grunt-spritesmith.js":"module.exports = require('../src/grunt-spritesmith.js');\n","/home/travis/build/npmtest/node-npmtest-grunt-spritesmith/node_modules/grunt-spritesmith/src/grunt-spritesmith.js":"// Load in dependencies\nvar fs = require('fs');\nvar path = require('path');\nvar _ = require('underscore');\nvar async = require('async');\nvar templater = require('spritesheet-templates');\nvar Spritesmith = require('spritesmith');\nvar url = require('url2');\n\n// Define class to contain different extension handlers\nfunction ExtFormat() {\n  this.formatObj = {};\n}\nExtFormat.prototype = {\n  add: function (name, val) {\n    this.formatObj[name] = val;\n  },\n  get: function (filepath) {\n    // Grab the extension from the filepath\n    var ext = path.extname(filepath);\n    var lowerExt = ext.toLowerCase();\n\n    // Look up the file extenion from our format object\n    var formatObj = this.formatObj;\n    var format = formatObj[lowerExt];\n    return format;\n  }\n};\n\n// Create img and css formats\nvar imgFormats = new ExtFormat();\nvar cssFormats = new ExtFormat();\n\n// Add our img formats\nimgFormats.add('.png', 'png');\nimgFormats.add('.jpg', 'jpeg');\nimgFormats.add('.jpeg', 'jpeg');\n\n// Add our css formats\ncssFormats.add('.styl', 'stylus');\ncssFormats.add('.stylus', 'stylus');\ncssFormats.add('.sass', 'sass');\ncssFormats.add('.scss', 'scss');\ncssFormats.add('.less', 'less');\ncssFormats.add('.json', 'json');\ncssFormats.add('.css', 'css');\n\nfunction getCoordinateName(filepath) {\n  // Extract the image name (exlcuding extension)\n  var fullname = path.basename(filepath);\n  var nameParts = fullname.split('.');\n\n  // If there is are more than 2 parts, pop the last one\n  if (nameParts.length >= 2) {\n    nameParts.pop();\n  }\n\n  // Return our modified filename\n  return nameParts.join('.');\n}\n\nmodule.exports = function gruntSpritesmith (grunt) {\n  // Create a gruntSpritesmithFn function\n  function gruntSpritesmithFn() {\n    // Grab the raw configuration\n    var data = this.data;\n\n    // If we were invoked via `grunt-newer`, re-localize the info\n    if (data.src === undefined && data.files) {\n      data = data.files[0] || {};\n    }\n\n    // Determine the origin and destinations\n    var src = data.src;\n    var destImg = data.dest;\n    var destCss = data.destCss;\n    var cssTemplate = data.cssTemplate;\n    var that = this;\n\n    // Verify all properties are here\n    if (!src || !destImg || !destCss) {\n      return grunt.fatal('grunt.sprite requires a src, dest (img), and destCss property');\n    }\n\n    // Expand all filepaths (e.g. `*.png` -> `home.png`)\n    var srcFiles = grunt.file.expand(src);\n\n    // If there are settings for retina\n    var retinaSrcFiles;\n    var retinaSrcFilter = data.retinaSrcFilter;\n    var retinaDestImg = data.retinaDest;\n    if (retinaSrcFilter || retinaDestImg) {\n      grunt.log.debug('Retina settings detected');\n\n      // Verify our required set is present\n      if (!retinaSrcFilter || !retinaDestImg) {\n        return grunt.fatal('Retina settings detected. We must have both `retinaSrcFilter` and `retinaDest` ' +\n          'provided for retina to work');\n      }\n\n      // Filter out our retina files\n      retinaSrcFiles = [];\n      srcFiles = srcFiles.filter(function filterSrcFile (filepath) {\n        // If we have a retina file, filter it out\n        if (grunt.file.match(retinaSrcFilter, filepath).length) {\n          retinaSrcFiles.push(filepath);\n          return false;\n        // Otherwise, keep it in the src files\n        } else {\n          return true;\n        }\n      });\n      grunt.verbose.writeln('Retina images found: ' + retinaSrcFiles.join(', '));\n\n      // If we have a different amount of normal and retina images, complain and leave\n      if (srcFiles.length !== retinaSrcFiles.length) {\n        return grunt.fatal('Retina settings detected but ' + retinaSrcFiles.length + ' retina images were found. ' +\n          'We have ' + srcFiles.length + ' normal images and expect these numbers to line up. ' +\n          'Please double check `retinaSrcFilter`.');\n      }\n    }\n\n    // Create an async callback\n    var callback = this.async();\n\n    // Determine the format of the image\n    var imgOpts = data.imgOpts || {};\n    var imgFormat = imgOpts.format || imgFormats.get(destImg) || 'png';\n\n    // Set up the defautls for imgOpts\n    _.defaults(imgOpts, {format: imgFormat});\n\n    // Prepare spritesmith parameters\n    var spritesmithParams = {\n      engine: data.engine,\n      algorithm: data.algorithm,\n      padding: data.padding || 0,\n      algorithmOpts: data.algorithmOpts || {},\n      engineOpts: data.engineOpts || {},\n      exportOpts: imgOpts\n    };\n\n    // Construct our spritesmiths\n    var spritesmith = new Spritesmith(spritesmithParams);\n    var retinaSpritesmithParams;\n    var retinaSpritesmith;\n    if (retinaSrcFiles) {\n      retinaSpritesmithParams = _.defaults({\n        padding: spritesmithParams.padding * 2\n      }, spritesmithParams);\n      retinaSpritesmith = new Spritesmith(retinaSpritesmithParams);\n    }\n\n    // In parallel\n    async.parallel([\n      // Load in our normal images\n      function generateNormalImages (callback) {\n        spritesmith.createImages(srcFiles, callback);\n      },\n      // If we have retina images, load them in as well\n      function generateRetinaImages (callback) {\n        if (retinaSrcFiles) {\n          retinaSpritesmith.createImages(retinaSrcFiles, callback);\n        } else {\n          process.nextTick(callback);\n        }\n      }\n    ], function handleImages (err, resultArr) {\n      // If an error occurred, callback with it\n      if (err) {\n        grunt.fatal(err);\n        return callback(err);\n      }\n\n      // Otherwise, validate our images line up\n      var normalSprites = resultArr[0];\n      var retinaSprites = resultArr[1];\n      // TODO: Validate error looks good\n      if (retinaSprites) {\n        normalSprites.forEach(function validateSprites (normalSprite, i) {\n          var retinaSprite = retinaSprites[i];\n          if (retinaSprite.width !== normalSprite.width * 2 || retinaSprite.height !== normalSprite.height * 2) {\n            grunt.log.warn('Normal sprite has inconsistent size with retina sprite. ' +\n              '\"' + srcFiles[i] + '\" is ' + normalSprite.width + 'x' + normalSprite.height + ' while ' +\n              '\"' + retinaSrcFiles[i] + '\" is ' + retinaSprite.width + 'x' + retinaSprite.height + '.');\n          }\n        });\n      }\n\n      // Process our sprites into spritesheets\n      var result = spritesmith.processImages(normalSprites, spritesmithParams);\n      var retinaResult;\n      if (retinaSprites) {\n        retinaResult = retinaSpritesmith.processImages(retinaSprites, retinaSpritesmithParams);\n      }\n\n      // Generate a listing of CSS variables\n      var coordinates = result.coordinates;\n      var properties = result.properties;\n      var spritePath = data.imgPath || url.relative(destCss, destImg);\n      var spritesheetInfo = {\n        width: properties.width,\n        height: properties.height,\n        image: spritePath\n      };\n      var cssVarMap = data.cssVarMap || function noop () {};\n      var cleanCoords = [];\n\n      // Clean up the file name of the file\n      Object.getOwnPropertyNames(coordinates).sort().forEach(function prepareTemplateData (file) {\n        // Extract out our name\n        var name = getCoordinateName(file);\n        var coords = coordinates[file];\n\n        // Specify the image for the sprite\n        coords.name = name;\n        coords.source_image = file;\n        // DEV: `image`, `total_width`, `total_height` are deprecated as they are overwritten in `spritesheet-templates`\n        coords.image = spritePath;\n        coords.total_width = properties.width;\n        coords.total_height = properties.height;\n\n        // Map the coordinates through cssVarMap\n        coords = cssVarMap(coords) || coords;\n\n        // Save the cleaned name and coordinates\n        cleanCoords.push(coords);\n      });\n\n      // If we have retina sprites\n      var retinaCleanCoords;\n      var retinaGroups;\n      var retinaSpritesheetInfo;\n      if (retinaResult) {\n        // Generate a listing of CSS variables\n        var retinaCoordinates = retinaResult.coordinates;\n        var retinaProperties = retinaResult.properties;\n        var retinaSpritePath = data.retinaImgPath || url.relative(destCss, retinaDestImg);\n        retinaSpritesheetInfo = {\n          width: retinaProperties.width,\n          height: retinaProperties.height,\n          image: retinaSpritePath\n        };\n        // DEV: We reuse cssVarMap\n        retinaCleanCoords = [];\n\n        // Clean up the file name of the file\n        Object.getOwnPropertyNames(retinaCoordinates).sort().forEach(function prepareRetinaTemplateData (file) {\n          var name = getCoordinateName(file);\n          var coords = retinaCoordinates[file];\n          coords.name = name;\n          coords.source_image = file;\n          coords.image = retinaSpritePath;\n          coords.total_width = retinaProperties.width;\n          coords.total_height = retinaProperties.height;\n          coords = cssVarMap(coords) || coords;\n          retinaCleanCoords.push(coords);\n        });\n\n        // Generate groups for our coordinates\n        retinaGroups = cleanCoords.map(function getRetinaGroups (normalSprite, i) {\n          // DEV: Name is inherited from `cssVarMap` on normal sprite\n          return {\n            name: normalSprite.name,\n            index: i\n          };\n        });\n      }\n\n      // If we have handlebars helpers, register them\n      var handlebarsHelpers = data.cssHandlebarsHelpers;\n      if (handlebarsHelpers) {\n        Object.keys(handlebarsHelpers).forEach(function registerHelper (helperKey) {\n          templater.registerHandlebarsHelper(helperKey, handlebarsHelpers[helperKey]);\n        });\n      }\n\n      // If there is a custom template, use it\n      var cssFormat = 'spritesmith-custom';\n      var cssOptions = data.cssOpts || {};\n      if (cssTemplate) {\n        if (typeof cssTemplate === 'function') {\n          templater.addTemplate(cssFormat, cssTemplate);\n        } else {\n          templater.addHandlebarsTemplate(cssFormat, fs.readFileSync(cssTemplate, 'utf8'));\n        }\n      // Otherwise, override the cssFormat and fallback to 'json'\n      } else {\n        cssFormat = data.cssFormat;\n        if (!cssFormat) {\n          cssFormat = cssFormats.get(destCss) || 'json';\n\n          // If we are dealing with retina items, move to retina flavor (e.g. `scss` -> `scss_retina`)\n          if (retinaGroups) {\n            cssFormat += '_retina';\n          }\n        }\n      }\n\n      // Render the variables via `spritesheet-templates`\n      var cssStr = templater({\n        sprites: cleanCoords,\n        spritesheet: spritesheetInfo,\n        spritesheet_info: {\n          name: data.cssSpritesheetName\n        },\n        retina_groups: retinaGroups,\n        retina_sprites: retinaCleanCoords,\n        retina_spritesheet: retinaSpritesheetInfo,\n        retina_spritesheet_info: {\n          name: data.cssRetinaSpritesheetName\n        },\n        retina_groups_info: {\n          name: data.cssRetinaGroupsName\n        }\n      }, {\n        format: cssFormat,\n        formatOpts: cssOptions\n      });\n\n      // Write out the content\n      async.parallel([\n        function outputNormalImage (cb) {\n          // Create our directory\n          var destImgDir = path.dirname(destImg);\n          grunt.file.mkdir(destImgDir);\n\n          // Generate our write stream and pipe the image to it\n          var writeStream = fs.createWriteStream(destImg);\n          writeStream.on('error', cb);\n          writeStream.on('finish', cb);\n          result.image.pipe(writeStream);\n        },\n        function outputRetinaImage (cb) {\n          if (retinaResult) {\n            var retinaDestImgDir = path.dirname(retinaDestImg);\n            grunt.file.mkdir(retinaDestImgDir);\n            var retinaWriteStream = fs.createWriteStream(retinaDestImg);\n            retinaWriteStream.on('error', cb);\n            retinaWriteStream.on('finish', cb);\n            retinaResult.image.pipe(retinaWriteStream);\n          } else {\n            process.nextTick(cb);\n          }\n        },\n        function outputCss (cb) {\n          var destCssDir = path.dirname(destCss);\n          grunt.file.mkdir(destCssDir);\n          fs.writeFile(destCss, cssStr, 'utf8', cb);\n        }\n      ], function handleError (err) {\n        // If there was an error, fail with it\n        if (err) {\n          grunt.fatal(err);\n          return callback(err);\n        }\n\n        // Fail task if errors were logged\n        if (that.errorCount) { callback(false); }\n\n        // Otherwise, print a success message\n        if (retinaDestImg) {\n          grunt.log.writeln('Files \"' + destCss + '\", \"' + destImg + '\", \"' + retinaDestImg + '\" created.');\n        } else {\n          grunt.log.writeln('Files \"' + destCss + '\", \"' + destImg + '\" created.');\n        }\n\n        // Callback\n        callback(true);\n      });\n    });\n  }\n\n  // Export the gruntSpritesmithFn function\n  grunt.registerMultiTask('sprite', 'Spritesheet making utility', gruntSpritesmithFn);\n};\n"}